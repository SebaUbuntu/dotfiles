#!/bin/bash

set -e

USER="SebaUbuntu"
SERVER="review.lineageos.org"
PORT="29418"
PREFIX="LineageOS"

REMOTE_PREFIX_HTTPS="https://github.com/LineageOS/"
REMOTE_PREFIX_GIT="git://github.com/LineageOS/"
REMOTE_PREFIX_SSH="ssh://git@github.com/LineageOS/"

ADDITIONAL_ARGS=()
ACKNOWLEDGE_HEADS_PUSH="false"

while [ "${#}" -gt 0 ]; do
    case "${1}" in
        -b | --branch)
            BRANCH="${2}"
            shift
            ;;
        -c | --code-review)
            ADDITIONAL_ARGS+=("-o l=Code-Review${2}")
            shift
            ;;
        -f | --force)
            ACKNOWLEDGE_HEADS_PUSH="true"
            ;;
        --merge_sha)
            MERGE_SHA="${2}"
            shift
            ;;
        -r | --repo)
            REPO="${2}"
            shift
            ;;
        -v | --verified)
            ADDITIONAL_ARGS+=("-o l=Verified${2}")
            shift
            ;;
        *)
            ADDITIONAL_ARGS+=("${1}")
            ;;
    esac
    shift
done

if [ "${BRANCH}" = "" ]; then
    echo "Branch is empty"
    exit 1
fi

REPOS=()

if [ "${REPO}" = "" ]; then
    for remote in $(git remote); do
        url="$(git remote get-url --push ${remote})"
        if [[ "${url}" == ${REMOTE_PREFIX_HTTPS}* ]]; then
            REPOS+=("${url#"$REMOTE_PREFIX_HTTPS"}")
        elif [[ "${url}" == ${REMOTE_PREFIX_GIT}* ]]; then
            REPOS+=("${url#"$REMOTE_PREFIX_GIT"}")
        elif [[ "${url}" == ${REMOTE_PREFIX_SSH}* ]]; then
            REPOS+=("${url#"$REMOTE_PREFIX_SSH"}")
        fi
    done
else
    REPOS+=("${REPO}")
fi

if [ "${#REPOS[@]}" -eq 0 ]; then
    echo "No remote found"
    exit 1
fi

if [ "${#REPOS[@]}" -gt 1 ]; then
    echo "Multiple remotes found, select one:"
    for i in "${!REPOS[@]}"; do
        echo "[$i] ${REPOS[$i]}"
    done
    read -p "Enter the number: " -r

    if ! [[ $REPLY =~ ^[0-9]+$ ]] || [ "${REPLY}" -lt 0 ] || [ "${REPLY}" -ge "${#REPOS[@]}" ]; then
        echo "Invalid input"
        exit 1
    fi

    REPO="${REPOS[$REPLY]}"
else
    REPO="${REPOS[0]}"
fi

if [ "${REPO}" = "" ]; then
    echo "Repo is empty"
    exit 1
fi

if [ "${MERGE_SHA}" != "" ]; then
    FIRST_SHA="$(git show -s --pretty=%P ${MERGE_SHA} | cut -d ' ' -f 1)"
    SECOND_SHA="$(git show -s --pretty=%P ${MERGE_SHA} | cut -d ' ' -f 2)"

    if [ "${FIRST_SHA}" = "" ] || [ "${SECOND_SHA}" = "" ]; then
        echo "Merge SHA is invalid"
        exit 1
    fi

    ADDITIONAL_ARGS+=("-o base=${FIRST_SHA}")
    ADDITIONAL_ARGS+=("-o base=${SECOND_SHA}")
fi

if [[ ! "${BRANCH}" =~ "/for/" ]] && [ "${ACKNOWLEDGE_HEADS_PUSH}" != "true" ]; then
    echo "Warning: Possibly bypassing Gerrit review process"
    echo "To acknowledge, run the command again with --force"
    exit 1
fi

git push "ssh://${USER}@${SERVER}:${PORT}/${PREFIX}/${REPO}" "${BRANCH}" ${ADDITIONAL_ARGS[@]}
