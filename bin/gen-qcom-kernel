#!/usr/bin/env python3

from argparse import ArgumentParser
from git import Repo
from pathlib import Path
from sebaubuntu_libs.liblogging import LOGI, setup_logging
from typing import Dict, List

GIT_SERVER = "https://git.codelinaro.org/clo/la"
PLATFORM_REPOS_PREFIX = f"{GIT_SERVER}/platform"

class Subtree:
	def __init__(self, folder: str, url: str):
		self.folder = folder
		self.url = url

# QCACLD
FW_API = Subtree("drivers/staging/fw-api", f"{PLATFORM_REPOS_PREFIX}/vendor/qcom-opensource/wlan/fw-api")
QCA_WIFI_HOST_CMN = Subtree("drivers/staging/qca-wifi-host-cmn", f"{PLATFORM_REPOS_PREFIX}/vendor/qcom-opensource/wlan/qca-wifi-host-cmn")
QCACLD_3_0 = Subtree("drivers/staging/qcacld-3.0", f"{PLATFORM_REPOS_PREFIX}/vendor/qcom-opensource/wlan/qcacld-3.0")

QCACLD_3_0_REPOS = [FW_API, QCA_WIFI_HOST_CMN, QCACLD_3_0]

# Techpacks
TECHPACK_AUDIO = Subtree("techpack/audio", f"{PLATFORM_REPOS_PREFIX}/vendor/opensource/audio-kernel")
TECHPACK_CAMERA = Subtree("techpack/camera", f"{PLATFORM_REPOS_PREFIX}/vendor/opensource/camera-kernel")
TECHPACK_DATA = Subtree("techpack/data", f"{PLATFORM_REPOS_PREFIX}/vendor/qcom-opensource/data-kernel")
TECHPACK_DATAIPA = Subtree("techpack/dataipa", f"{PLATFORM_REPOS_PREFIX}/vendor/opensource/dataipa")
TECHPACK_DATARMNET = Subtree("techpack/datarmnet", f"{PLATFORM_REPOS_PREFIX}/vendor/qcom/opensource/datarmnet")
TECHPACK_DATARMNET_EXT = Subtree("techpack/datarmnet-ext", f"{PLATFORM_REPOS_PREFIX}/vendor/qcom/opensource/datarmnet-ext")
TECHPACK_DISPLAY = Subtree("techpack/display", f"{PLATFORM_REPOS_PREFIX}/vendor/opensource/display-drivers")
TECHPACK_VIDEO = Subtree("techpack/video", f"{PLATFORM_REPOS_PREFIX}/vendor/opensource/video-driver")

class QcomPlatform:
	_ALL: Dict[str, 'QcomPlatform'] = {}

	def __init__(self,
	             name: str,
	             kernel_version: str,
	             subtrees: List[Subtree] = None):
		self.name = name
		self.kernel_version = kernel_version
		self.subtrees = subtrees or []

		QcomPlatform._ALL[name] = self

	@classmethod
	def from_name(cls, name: str) -> 'QcomPlatform':
		return cls._ALL[name]

	def get_kernel_url(self) -> str:
		return f"{GIT_SERVER}/kernel/msm-{self.kernel_version}"

# Platforms
SDM845 = QcomPlatform("sdm845", "4.9", [TECHPACK_AUDIO, *QCACLD_3_0_REPOS])
SM8150 = QcomPlatform("sm8150", "4.14", [TECHPACK_AUDIO, TECHPACK_DATA, *QCACLD_3_0_REPOS])
SM8250 = QcomPlatform("sm8250", "4.19", [TECHPACK_AUDIO, TECHPACK_CAMERA, TECHPACK_DATA, TECHPACK_DISPLAY, TECHPACK_VIDEO, *QCACLD_3_0_REPOS])
SM8350 = QcomPlatform("sm8350", "5.4", [TECHPACK_AUDIO, TECHPACK_CAMERA, TECHPACK_DATAIPA, TECHPACK_DATARMNET, TECHPACK_DATARMNET_EXT, TECHPACK_DISPLAY, TECHPACK_VIDEO, *QCACLD_3_0_REPOS])

def fetch_and_subtree(repo: Repo, url: str, tag: str, folder: str):
	repo.git.fetch(url, tag)
	repo.git.merge("--no-commit", "--allow-unrelated-histories", "FETCH_HEAD", strategy="ours")
	repo.git.read_tree(prefix=folder, u="FETCH_HEAD")
	repo.git.commit("--no-edit")

def main():
	setup_logging()

	parser = ArgumentParser()
	parser.add_argument("platform", help="Platform name (e.g. sm8250)")
	parser.add_argument("tag", help="CLO release tag (e.g. LA.UM.9.12.r1-14300.01-SMxx50.QSSI13.0)")
	parser.add_argument("output", help="Folder output (must not exist)", type=Path)
	args = parser.parse_args()

	assert not args.output.exists(), f"Output folder {args.output.absolute()} already exists"

	platform = QcomPlatform.from_name(args.platform)

	LOGI("Cloning kernel...")
	repo = Repo.clone_from(f"{GIT_SERVER}/kernel/msm-{platform.kernel_version}", args.output,
			multi_options=[f"-b {args.tag}", "--no-tags", "--single-branch"])

	for subtree in platform.subtrees:
		LOGI(f"Merging {subtree.folder}...")
		fetch_and_subtree(repo, subtree.url, args.tag, subtree.folder)

	LOGI(f"Done, you can find kernel sources in {args.output.absolute()}")

if __name__ == "__main__":
	main()
