#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#============================================================
#          FILE: sdat2img.py
#       AUTHORS: xpirt - luxi78 - howellzhu - SebaUbuntu
#          DATE: 2018-10-27 10:33:21 CEST
#============================================================

from argparse import ArgumentParser
from pathlib import Path

__version__ = "1.3.0"

SUPPORTED_VERSIONS = {
    1: "Android Lollipop 5.0",
    2: "Android Lollipop 5.1",
    3: "Android Marshmallow 6.x",
    4: "Android Nougat 7.x / Oreo 8.x",
}

def rangeset(src: str):
    src_set = src.split(',')
    num_set = [int(item) for item in src_set]
    assert len(num_set) == num_set[0]+1, f"Error on parsing following data to rangeset:\n{src}"

    return tuple([(num_set[i], num_set[i+1]) for i in range(1, len(num_set), 2)])

def parse_transfer_list_file(transfer_list_file: Path):
    with transfer_list_file.open('r') as trans_list:
        # First line in transfer list is the version number
        version = int(trans_list.readline())

        # Second line in transfer list is the total number of blocks we expect to write
        new_blocks = int(trans_list.readline())

        if version >= 2:
            # Third line is how many stash entries are needed simultaneously
            trans_list.readline()
            # Fourth line is the maximum number of blocks that will be stashed simultaneously
            trans_list.readline()

        # Subsequent lines are all individual transfer commands
        commands = []
        for line in trans_list:
            line = line.split(' ')
            cmd = line[0]
            if cmd in ['erase', 'new', 'zero']:
                commands.append([cmd, rangeset(line[1])])
            else:
                # Skip lines starting with numbers, they are not commands anyway
                assert cmd[0].isdigit(), f"Command {cmd} is not valid."

    return version, new_blocks, commands

def sdat2img(transfer_list_file: Path, new_data_file: Path, output_image_file: Path):
    BLOCK_SIZE = 4096

    version, _, commands = parse_transfer_list_file(transfer_list_file)

    if version in SUPPORTED_VERSIONS:
        print(f"Detected {SUPPORTED_VERSIONS[version]}")
    else:
        print("Unknown Android version!\n")

    with output_image_file.open('wb') as output_img, new_data_file.open('rb') as new_data:
        all_block_sets = [i for command in commands for i in command[1]]
        max_file_size = max(pair[1] for pair in all_block_sets)*BLOCK_SIZE

        for command in commands:
            if command[0] == 'new':
                for block in command[1]:
                    begin = block[0]
                    end = block[1]
                    block_count = end - begin
                    print(f"Copying {block_count} blocks into position {begin}...")

                    # Position output file
                    output_img.seek(begin*BLOCK_SIZE)

                    # Copy one block at a time
                    while block_count > 0:
                        output_img.write(new_data.read(BLOCK_SIZE))
                        block_count -= 1
            else:
                print(f"Skipping command {command[0]}...")

        # Make file larger if necessary
        if output_img.tell() < max_file_size:
            output_img.truncate(max_file_size)

    print(f"Done! Output image: {output_image_file.absolute()}")

if __name__ == '__main__':
    parser = ArgumentParser(description='Convert a sdat file to a raw image file')
    parser.add_argument('transfer_list_file', help='Path to the transfer list file', type=Path)
    parser.add_argument('new_data_file', help='Path to the new data file', type=Path)
    parser.add_argument('output_image_file', help='Path to the output image file', type=Path,
                        nargs='?', default='output.img')
    args = parser.parse_args()

    sdat2img(args.transfer_list_file, args.new_data_file, args.output_image_file)
